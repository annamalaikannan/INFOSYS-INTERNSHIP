# -*- coding: utf-8 -*-
"""infosys .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-5ZwrGd5w9eTQyvzg35vnWOITd871ZKI
"""

import pandas as pd

path='/content/Product_Reviews_Fixed.csv'
df2 = pd.read_csv(path)
df2

from transformers import pipeline
import matplotlib.pyplot as plt

# Loading the pre-trained sentiment analysis pipeline
sentiment_analyzer = pipeline('sentiment-analysis', model='distilbert-base-uncased-finetuned-sst-2-english')

# Analysing sentiment of text
def get_sentiment(text):
    try:
        result=sentiment_analyzer(text)
        print(f"Sentiment Result for '{text}': '{result}'")
        sentiment=result[0]['label']
        return sentiment
    except Exception as e:
        print(f"Error in Sentiment Result for '{text}': {e}")
        return 'Neutral'

# Converting data into datetime format
def preprocess_review_data(file_path):
    data=pd.read_csv(file_path)
    data["Date"]=pd.to_datetime(data["Date"])
    return data

# Converting sentiment label to score
def sentiment_to_score(sentiment):
    if sentiment=="POSITIVE":
        return 1
    elif sentiment=="NEGATIVE":
        return -1
    else:
        return 0

# Aggregating scores by date and product name
def agg_sentiment(sentiment_df):
    sentiment_df['sentiment_score']=sentiment_df['sentiment'].apply(sentiment_to_score)
    sentiment_agg=sentiment_df.groupby(['Date', 'Product Name'])['sentiment_score'].mean().reset_index()
    return sentiment_agg



def main(file_path):
#     Loading and preprocessing
    review_data = preprocess_review_data(file_path)

#     Sentiment Analysis on each review
    review_data['sentiment']=review_data['Review'].apply(get_sentiment)

#     Aggregating sentiment scores by date and product name
    sentiment_agg = agg_sentiment(review_data)

out = main(path)
df=pd.DataFrame(out)
df.to_csv('sentiment_analysis_final.csv', index=False)

def main(file_path):
    # Load and preprocess review data
    review_data = preprocess_review_data(file_path)

    # Perform sentiment analysis on each review
    review_data['sentiment'] = review_data['Review'].apply(get_sentiment)

    return review_data

# Run the main function and store the result in a global variable
review_data = main(path)

# Count sentiments for the pie chart
sentiment_counts = review_data['sentiment'].value_counts()

# Plot pie chart
plt.figure(figsize=(8, 8))
wedges, texts, autotexts = plt.pie(
    sentiment_counts,
    autopct='%1.1f%%',
    startangle=140,
    colors=['#66b3ff', '#ff9999', '#99ff99']
)

# Add a legend in the upper left corner
plt.legend(
    wedges,
    sentiment_counts.index,
    title="Sentiments",
    loc="upper left",
    bbox_to_anchor=(-0.1, 1.0)
)

plt.title('Sentiment Distribution')
plt.axis('equal')  # Equal aspect ratio ensures that the pie is drawn as a circle
plt.show()

# Plotting sentiment trend for each product
def line_plot_sentiment(sentiment_agg, product_name, filename='Sentiment_Analysis_lineplot.png'):
    product_data=sentiment_agg[sentiment_agg['Product Name']==product_name]
    plt.figure(figsize=(10,6))
    plt.plot(product_data['Date'], product_data['sentiment_score'], marker='x', label='Product Name')
    plt.xlabel('Date')
    plt.ylabel('Avg Sentiment Score')
    plt.title(f"Sentiment Trend over time for {product_name}")
    plt.grid(True)
    plt.legend()
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig(filename)
    plt.show()

# Ensure the 'Date' column is in datetime format (if not already)
review_data['Date'] = pd.to_datetime(review_data['Date'])

# Convert sentiment labels to scores for intensity
def sentiment_to_score(sentiment):
    if sentiment == "POSITIVE":
        return 1
    elif sentiment == "NEGATIVE":
        return -1
    else:
        return 0

# Apply sentiment-to-score conversion
review_data['sentiment_score'] = review_data['sentiment'].apply(sentiment_to_score)

# Sort data by date (optional, ensures chronological order)
review_data = review_data.sort_values(by='Date')

# Plot sentiment intensity line chart
plt.figure(figsize=(14, 7))
plt.plot(
    review_data['Date'],
    review_data['sentiment_score'],
    marker='o',
    linestyle='-',
    color='b',
    label='Sentiment Intensity'
)

plt.axhline(0, color='gray', linestyle='--', linewidth=1)  # Add a baseline at 0
plt.title("Sentiment Intensity Over Time", fontsize=16)
plt.xlabel("Date", fontsize=14)
plt.ylabel("Sentiment Score", fontsize=14)
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.legend(loc="upper right", fontsize=12)
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

